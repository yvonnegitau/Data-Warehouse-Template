version: '3'

services:
  minio:
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - openstacknetwork
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINI_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_CACHE="on"
      - MINIO_CACHE_DRIVES=/mnt/drive1,/mnt/drive2
      - MINIO_CACHE_QUOTA=80 # 80% of the drive will be used for caching
      - MINIO_CACHE_AFTER=1 # Object will be cached after the first request to it
      - MINIO_CACHE_WATERMARK_LOW=70 # Least accessed objects will be erased after the cache disk reaches the 70% watermark
      - MINIO_CACHE_WATERMARK_HIGH=90
    command: server /data --console-address ":9001"

  postgres:
    image: postgres:15
    container_name: postgresql
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    networks:
      - openstacknetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 10s
      timeout: 8s
      retries: 5
  dagster_code:
    build:
      context: .
      dockerfile: ./Extraction/Dagster/Dockerfile.code
    container_name: dagster_code
    image: dagster_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DAGSTER_CURRENT_IMAGE: ${DAGSTER_CURRENT_IMAGE}
    networks:
      - openstacknetwork
  dagster_webserver:
    build:
      context: .
      dockerfile: ./Extraction/Dagster/Dockerfile.dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - openstacknetwork
    depends_on:
      postgres:
        condition: service_healthy
      dagster_code:
        condition: service_started
  dagster_daemon:
    build:
      context: .
      dockerfile: ./Extraction/Dagster/Dockerfile.dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - openstacknetwork
    depends_on:
      postgres:
        condition: service_healthy
      dagster_code:
        condition: service_started

  nginx:
    build:
      context: .
      dockerfile: ./Extraction/Dagster/Dockerfile.nginx
    container_name: nginx
    ports:
      - "80:80"
    expose:
      - "80"
    environment:
      FORWARD_HOST: dagster_webserver
      FORWARD_PORT: 3001
      BASIC_USERNAME: ${BASIC_USERNAME}
      BASIC_PASSWORD: ${BASIC_PASSWORD}
    networks:
      - openstacknetwork
    depends_on:
      dagster_webserver:
        condition: service_started
      dagster_daemon:
        condition: service_started
      minio:
        condition: service_started
      postgres:
        condition: service_healthy
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./Monitoring/prometheus:/etc/prometheus
      - prom_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - openstacknetwork
    depends_on:
      dagster_webserver:
        condition: service_started
      dagster_daemon:
        condition: service_started
      minio:
        condition: service_started
      postgres:
        condition: service_healthy
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./Monitoring/grafana:/etc/grafana/provisioning
    networks:
      - openstacknetwork
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    depends_on:
      prometheus:
        condition: service_started
  clickhouse:
    image: 'clickhouse/clickhouse-server:${CHVER:-latest}'
    user: '101:101'
    container_name: clickhouse
    hostname: clickhouse
    volumes:
      - ./Analytics/clickhouse/clickhouse-server/:/etc/clickhouse-server/config.d/config.xml
      - ./Analytics/clickhouse/clickhouse-server/:/etc/clickhouse-server/users.d/users.xml
    ports:
      - '8123:8123'
      - '9002:9002'
    depends_on:
      - clickhouse-keeper
    networks:
      - openstacknetwork
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

  clickhouse-keeper:
    image: 'clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}'
    user: '101:101'
    container_name: clickhouse-keeper
    hostname: clickhouse-keeper
    volumes:
      - ${PWD}/Analytics/clickhouse/clickhouse-keeper:/etc/clickhouse-keeper
    ports:
      - '9181:9181'
    networks:
      - openstacknetwork
networks:
  openstacknetwork:
    driver: bridge
volumes:
  minio_data:
    driver: local
  prom_data:
    driver: local
